---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False 
  register: checkout
  ignore_errors: True

- name: set condtional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- name: download tower installer
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ towerversion }}.tar.gz
    dest: /tmp/ansible-tower-setup-{{ towerversion }}.tar.gz
    mode: 0640
  when: towerchk != towerversion

- name: extract installer
  unarchive:
    src: /tmp/ansible-tower-setup-{{ towerversion }}.tar.gz
    dest: /tmp/
    remote_src: True
  when: towerchk != towerversion

- name: template inventory file
  template:
    src: inventory 
    dest: /tmp/ansible-tower-setup-{{ towerversion }}/inventory 
  when: towerchk != towerversion

- name: run the tower installer
  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-{{ towerversion }}
  when: towerchk != towerversion

- name: wait for tower to be up
  pause:
    seconds: 20
  when: towerchk != towerversion

- name: Post license key
  uri:
    url: https://localhost/api/v1/config/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('file','tower_license.json') }}"
    body_format: json
    validate_certs: False 

# These next two configure inventory and credentials depending on provisioning. 

- include_tasks: "vagrant.yml"
  when: "'tag_Vagrant_True' in group_names"

- include_tasks: "aws.yml"
  when: "'tag_AWS_True' in group_names"

- name: create project
  uri:
    url:  https://localhost/api/v1/projects/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('file','tower_project.json') }}"
    body_format: json
    validate_certs: False 
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

- name: kick off project sync
  uri:
    url:  https://localhost/api/v2/projects/2/update
    method: POST
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    status_code:
      - 200
      - 201
  when: response.status == 201

- name: wait for project sync
  pause:
    seconds: 20
  when: response.status == 201

- name: create job template
  uri:
    url:  https://localhost/api/v1/job_templates/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('file','tower_job_template.json') }}"
    body_format: json
    validate_certs: False 
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

